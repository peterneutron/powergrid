syntax = "proto3";

package rpc;
option go_package = "powergrid/internal/rpc";

service PowerGrid {
  rpc GetStatus(Empty) returns (StatusResponse);
  rpc SetChargeLimit(SetChargeLimitRequest) returns (Empty);
  rpc SetPowerFeature(SetPowerFeatureRequest) returns (Empty);
}

message Empty {}

message StatusResponse {
  int32  current_charge = 1;
  bool   is_charging = 2;
  bool   is_connected = 3;
  int32  charge_limit = 4;
  bool   is_charge_limited = 5;
  int32  cycle_count = 6;
  string adapter_description = 7;
  float battery_wattage = 8;
  float adapter_wattage = 9;
  float system_wattage = 10;
  int32 health_by_max = 11;               // IOKit.Calculations.HealthByMaxCapacity
  float adapter_input_voltage = 12;       // IOKit.Adapter.InputVoltage (V)
  float adapter_input_amperage = 13;      // IOKit.Adapter.InputAmperage (A)
  bool prevent_display_sleep_active = 14; // Assertion active in this process
  bool prevent_system_sleep_active = 15;  // Assertion active in this process
  bool force_discharge_active = 16;       // Adapter disabled via SMC
  bool smc_charging_enabled = 17;         // SMC.State.IsChargingEnabled
  bool smc_adapter_enabled = 18;          // SMC.State.IsAdapterEnabled
  int32 adapter_max_watts = 19;           // IOKit.Adapter.MaxWatts (W)
}

message SetChargeLimitRequest {
  int32 limit = 1; // The new charge limit, e.g., 80.
}

enum PowerFeature {
  POWER_FEATURE_UNSPECIFIED = 0;
  PREVENT_DISPLAY_SLEEP = 1;
  PREVENT_SYSTEM_SLEEP = 2;
  FORCE_DISCHARGE = 3;
}

message SetPowerFeatureRequest {
  PowerFeature feature = 1;
  bool enable = 2;
}
