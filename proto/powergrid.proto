syntax = "proto3";

package rpc;
option go_package = "powergrid/internal/rpc";

service PowerGrid {
  rpc GetStatus(Empty) returns (StatusResponse);
  rpc SetChargeLimit(SetChargeLimitRequest) returns (Empty);
  rpc SetPowerFeature(SetPowerFeatureRequest) returns (Empty);
  rpc GetVersion(Empty) returns (VersionResponse);
}

message Empty {}

message StatusResponse {
  int32  current_charge = 1;
  bool   is_charging = 2;
  bool   is_connected = 3;
  int32  charge_limit = 4;
  bool   is_charge_limited = 5;
  int32  cycle_count = 6;
  string adapter_description = 7;
  float battery_wattage = 8;
  float adapter_wattage = 9;
  float system_wattage = 10;
  int32 health_by_max = 11;               // IOKit.Calculations.HealthByMaxCapacity
  float adapter_input_voltage = 12;       // IOKit.Adapter.InputVoltage (V)
  float adapter_input_amperage = 13;      // IOKit.Adapter.InputAmperage (A)
  bool prevent_display_sleep_active = 14; // Assertion active in this process
  bool prevent_system_sleep_active = 15;  // Assertion active in this process
  bool force_discharge_active = 16;       // Adapter disabled via SMC
  bool smc_charging_enabled = 17;         // SMC.State.IsChargingEnabled
  bool smc_adapter_enabled = 18;          // SMC.State.IsAdapterEnabled
  int32 adapter_max_watts = 19;           // IOKit.Adapter.MaxWatts (W)
  int32 time_to_full_minutes = 20;        // IOKit.Battery.TimeToFull (minutes)
  int32 time_to_empty_minutes = 21;       // IOKit.Battery.TimeToEmpty (minutes)
  bool  magsafe_led_control_active = 22;  // Whether daemon is controlling MagSafe LED
  bool  magsafe_led_supported = 23;       // Hardware supports MagSafe LED control
  bool  low_power_mode_enabled = 24;      // macOS Low Power Mode is enabled
  bool  disable_charging_before_sleep_active = 25; // Whether daemon will disable charging before sleep
  string battery_serial_number = 26;      // Battery serial number
  int32  battery_design_capacity = 27;    // mAh
  int32  battery_max_capacity = 28;       // mAh (current maximum)
  int32  battery_nominal_capacity = 29;   // mAh (design nominal)
  float  battery_voltage = 30;            // V
  float  battery_amperage = 31;           // A
  repeated int32 battery_individual_cell_millivolts = 32; // Per-cell voltage in mV
  float  battery_temperature_c = 33;      // Â°C
}

message SetChargeLimitRequest {
  int32 limit = 1; // The new charge limit, e.g., 80.
}

enum PowerFeature {
  POWER_FEATURE_UNSPECIFIED = 0;
  PREVENT_DISPLAY_SLEEP = 1;
  PREVENT_SYSTEM_SLEEP = 2;
  FORCE_DISCHARGE = 3;
  CONTROL_MAGSAFE_LED = 4;
  LOW_POWER_MODE = 5; // Toggle macOS Low Power Mode
  DISABLE_CHARGING_BEFORE_SLEEP = 6; // Toggle disabling charging before sleep
}

message SetPowerFeatureRequest {
  PowerFeature feature = 1;
  bool enable = 2;
}

message VersionResponse {
  string build_id = 1; // Daemon build identifier (e.g., SHA-256 of executable)
}
