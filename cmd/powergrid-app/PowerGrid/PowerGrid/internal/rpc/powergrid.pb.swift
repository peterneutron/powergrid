// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: powergrid.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Rpc_PowerFeature: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case preventDisplaySleep // = 1
  case preventSystemSleep // = 2
  case forceDischarge // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .preventDisplaySleep
    case 2: self = .preventSystemSleep
    case 3: self = .forceDischarge
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .preventDisplaySleep: return 1
    case .preventSystemSleep: return 2
    case .forceDischarge: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rpc_PowerFeature] = [
    .unspecified,
    .preventDisplaySleep,
    .preventSystemSleep,
    .forceDischarge,
  ]

}

public struct Rpc_Empty: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rpc_StatusResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var currentCharge: Int32 {
    get {return _storage._currentCharge}
    set {_uniqueStorage()._currentCharge = newValue}
  }

  public var isCharging: Bool {
    get {return _storage._isCharging}
    set {_uniqueStorage()._isCharging = newValue}
  }

  public var isConnected: Bool {
    get {return _storage._isConnected}
    set {_uniqueStorage()._isConnected = newValue}
  }

  public var chargeLimit: Int32 {
    get {return _storage._chargeLimit}
    set {_uniqueStorage()._chargeLimit = newValue}
  }

  /// True if the daemon is actively inhibiting charge.
  public var isChargeLimited: Bool {
    get {return _storage._isChargeLimited}
    set {_uniqueStorage()._isChargeLimited = newValue}
  }

  public var cycleCount: Int32 {
    get {return _storage._cycleCount}
    set {_uniqueStorage()._cycleCount = newValue}
  }

  public var adapterDescription: String {
    get {return _storage._adapterDescription}
    set {_uniqueStorage()._adapterDescription = newValue}
  }

  public var batteryWattage: Float {
    get {return _storage._batteryWattage}
    set {_uniqueStorage()._batteryWattage = newValue}
  }

  public var adapterWattage: Float {
    get {return _storage._adapterWattage}
    set {_uniqueStorage()._adapterWattage = newValue}
  }

  public var systemWattage: Float {
    get {return _storage._systemWattage}
    set {_uniqueStorage()._systemWattage = newValue}
  }

  /// Added fields
  public var healthByMax: Int32 {
    get {return _storage._healthByMax}
    set {_uniqueStorage()._healthByMax = newValue}
  }

  /// IOKit.Adapter.InputVoltage (V)
  public var adapterInputVoltage: Float {
    get {return _storage._adapterInputVoltage}
    set {_uniqueStorage()._adapterInputVoltage = newValue}
  }

  /// IOKit.Adapter.InputAmperage (A)
  public var adapterInputAmperage: Float {
    get {return _storage._adapterInputAmperage}
    set {_uniqueStorage()._adapterInputAmperage = newValue}
  }

  /// Assertion active in this process
  public var preventDisplaySleepActive: Bool {
    get {return _storage._preventDisplaySleepActive}
    set {_uniqueStorage()._preventDisplaySleepActive = newValue}
  }

  /// Assertion active in this process
  public var preventSystemSleepActive: Bool {
    get {return _storage._preventSystemSleepActive}
    set {_uniqueStorage()._preventSystemSleepActive = newValue}
  }

  /// Adapter disabled via SMC
  public var forceDischargeActive: Bool {
    get {return _storage._forceDischargeActive}
    set {_uniqueStorage()._forceDischargeActive = newValue}
  }

  /// SMC ground-truth bits for precise UI mapping
  public var smcChargingEnabled: Bool {
    get {return _storage._smcChargingEnabled}
    set {_uniqueStorage()._smcChargingEnabled = newValue}
  }

  /// SMC.State.IsAdapterEnabled
  public var smcAdapterEnabled: Bool {
    get {return _storage._smcAdapterEnabled}
    set {_uniqueStorage()._smcAdapterEnabled = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rpc_SetChargeLimitRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The new charge limit, e.g., 80.
  public var limit: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rpc_SetPowerFeatureRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var feature: Rpc_PowerFeature = .unspecified

  public var enable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rpc"

extension Rpc_PowerFeature: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POWER_FEATURE_UNSPECIFIED"),
    1: .same(proto: "PREVENT_DISPLAY_SLEEP"),
    2: .same(proto: "PREVENT_SYSTEM_SLEEP"),
    3: .same(proto: "FORCE_DISCHARGE"),
  ]
}

extension Rpc_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Empty"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rpc_Empty, rhs: Rpc_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rpc_StatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_charge"),
    2: .standard(proto: "is_charging"),
    3: .standard(proto: "is_connected"),
    4: .standard(proto: "charge_limit"),
    5: .standard(proto: "is_charge_limited"),
    6: .standard(proto: "cycle_count"),
    7: .standard(proto: "adapter_description"),
    8: .standard(proto: "battery_wattage"),
    9: .standard(proto: "adapter_wattage"),
    10: .standard(proto: "system_wattage"),
    11: .standard(proto: "health_by_max"),
    12: .standard(proto: "adapter_input_voltage"),
    13: .standard(proto: "adapter_input_amperage"),
    14: .standard(proto: "prevent_display_sleep_active"),
    15: .standard(proto: "prevent_system_sleep_active"),
    16: .standard(proto: "force_discharge_active"),
    17: .standard(proto: "smc_charging_enabled"),
    18: .standard(proto: "smc_adapter_enabled"),
  ]

  fileprivate class _StorageClass {
    var _currentCharge: Int32 = 0
    var _isCharging: Bool = false
    var _isConnected: Bool = false
    var _chargeLimit: Int32 = 0
    var _isChargeLimited: Bool = false
    var _cycleCount: Int32 = 0
    var _adapterDescription: String = String()
    var _batteryWattage: Float = 0
    var _adapterWattage: Float = 0
    var _systemWattage: Float = 0
    var _healthByMax: Int32 = 0
    var _adapterInputVoltage: Float = 0
    var _adapterInputAmperage: Float = 0
    var _preventDisplaySleepActive: Bool = false
    var _preventSystemSleepActive: Bool = false
    var _forceDischargeActive: Bool = false
    var _smcChargingEnabled: Bool = false
    var _smcAdapterEnabled: Bool = false

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currentCharge = source._currentCharge
      _isCharging = source._isCharging
      _isConnected = source._isConnected
      _chargeLimit = source._chargeLimit
      _isChargeLimited = source._isChargeLimited
      _cycleCount = source._cycleCount
      _adapterDescription = source._adapterDescription
      _batteryWattage = source._batteryWattage
      _adapterWattage = source._adapterWattage
      _systemWattage = source._systemWattage
      _healthByMax = source._healthByMax
      _adapterInputVoltage = source._adapterInputVoltage
      _adapterInputAmperage = source._adapterInputAmperage
      _preventDisplaySleepActive = source._preventDisplaySleepActive
      _preventSystemSleepActive = source._preventSystemSleepActive
      _forceDischargeActive = source._forceDischargeActive
      _smcChargingEnabled = source._smcChargingEnabled
      _smcAdapterEnabled = source._smcAdapterEnabled
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._currentCharge) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._isCharging) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._isConnected) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._chargeLimit) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._isChargeLimited) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._cycleCount) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._adapterDescription) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._batteryWattage) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._adapterWattage) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._systemWattage) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._healthByMax) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._adapterInputVoltage) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._adapterInputAmperage) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._preventDisplaySleepActive) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._preventSystemSleepActive) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._forceDischargeActive) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._smcChargingEnabled) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._smcAdapterEnabled) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._currentCharge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._currentCharge, fieldNumber: 1)
      }
      if _storage._isCharging != false {
        try visitor.visitSingularBoolField(value: _storage._isCharging, fieldNumber: 2)
      }
      if _storage._isConnected != false {
        try visitor.visitSingularBoolField(value: _storage._isConnected, fieldNumber: 3)
      }
      if _storage._chargeLimit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._chargeLimit, fieldNumber: 4)
      }
      if _storage._isChargeLimited != false {
        try visitor.visitSingularBoolField(value: _storage._isChargeLimited, fieldNumber: 5)
      }
      if _storage._cycleCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._cycleCount, fieldNumber: 6)
      }
      if !_storage._adapterDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._adapterDescription, fieldNumber: 7)
      }
      if _storage._batteryWattage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._batteryWattage, fieldNumber: 8)
      }
      if _storage._adapterWattage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._adapterWattage, fieldNumber: 9)
      }
      if _storage._systemWattage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._systemWattage, fieldNumber: 10)
      }
      if _storage._healthByMax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._healthByMax, fieldNumber: 11)
      }
      if _storage._adapterInputVoltage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._adapterInputVoltage, fieldNumber: 12)
      }
      if _storage._adapterInputAmperage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._adapterInputAmperage, fieldNumber: 13)
      }
      if _storage._preventDisplaySleepActive != false {
        try visitor.visitSingularBoolField(value: _storage._preventDisplaySleepActive, fieldNumber: 14)
      }
      if _storage._preventSystemSleepActive != false {
        try visitor.visitSingularBoolField(value: _storage._preventSystemSleepActive, fieldNumber: 15)
      }
      if _storage._forceDischargeActive != false {
        try visitor.visitSingularBoolField(value: _storage._forceDischargeActive, fieldNumber: 16)
      }
      if _storage._smcChargingEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._smcChargingEnabled, fieldNumber: 17)
      }
      if _storage._smcAdapterEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._smcAdapterEnabled, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rpc_StatusResponse, rhs: Rpc_StatusResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._currentCharge != rhs_storage._currentCharge {return false}
        if _storage._isCharging != rhs_storage._isCharging {return false}
        if _storage._isConnected != rhs_storage._isConnected {return false}
        if _storage._chargeLimit != rhs_storage._chargeLimit {return false}
        if _storage._isChargeLimited != rhs_storage._isChargeLimited {return false}
        if _storage._cycleCount != rhs_storage._cycleCount {return false}
        if _storage._adapterDescription != rhs_storage._adapterDescription {return false}
        if _storage._batteryWattage != rhs_storage._batteryWattage {return false}
        if _storage._adapterWattage != rhs_storage._adapterWattage {return false}
        if _storage._systemWattage != rhs_storage._systemWattage {return false}
        if _storage._healthByMax != rhs_storage._healthByMax {return false}
        if _storage._adapterInputVoltage != rhs_storage._adapterInputVoltage {return false}
        if _storage._adapterInputAmperage != rhs_storage._adapterInputAmperage {return false}
        if _storage._preventDisplaySleepActive != rhs_storage._preventDisplaySleepActive {return false}
        if _storage._preventSystemSleepActive != rhs_storage._preventSystemSleepActive {return false}
        if _storage._forceDischargeActive != rhs_storage._forceDischargeActive {return false}
        if _storage._smcChargingEnabled != rhs_storage._smcChargingEnabled {return false}
        if _storage._smcAdapterEnabled != rhs_storage._smcAdapterEnabled {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rpc_SetChargeLimitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChargeLimitRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rpc_SetChargeLimitRequest, rhs: Rpc_SetChargeLimitRequest) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rpc_SetPowerFeatureRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPowerFeatureRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feature"),
    2: .same(proto: "enable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.feature) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.enable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.feature != .unspecified {
      try visitor.visitSingularEnumField(value: self.feature, fieldNumber: 1)
    }
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rpc_SetPowerFeatureRequest, rhs: Rpc_SetPowerFeatureRequest) -> Bool {
    if lhs.feature != rhs.feature {return false}
    if lhs.enable != rhs.enable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
