// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: powergrid.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Rpc_Empty: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Rpc_StatusResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentCharge: Int32 = 0

  var isCharging: Bool = false

  var isConnected: Bool = false

  var chargeLimit: Int32 = 0

  /// True if the daemon is actively inhibiting charge.
  var isChargeLimited: Bool = false

  var cycleCount: Int32 = 0

  var adapterDescription: String = String()

  var batteryWattage: Float = 0

  var adapterWattage: Float = 0

  var systemWattage: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Rpc_SetChargeLimitRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The new charge limit, e.g., 80.
  var limit: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rpc"

extension Rpc_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Empty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Rpc_Empty, rhs: Rpc_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rpc_StatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_charge"),
    2: .standard(proto: "is_charging"),
    3: .standard(proto: "is_connected"),
    4: .standard(proto: "charge_limit"),
    5: .standard(proto: "is_charge_limited"),
    6: .standard(proto: "cycle_count"),
    7: .standard(proto: "adapter_description"),
    8: .standard(proto: "battery_wattage"),
    9: .standard(proto: "adapter_wattage"),
    10: .standard(proto: "system_wattage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.currentCharge) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isCharging) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isConnected) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.chargeLimit) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isChargeLimited) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.cycleCount) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.adapterDescription) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.batteryWattage) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.adapterWattage) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.systemWattage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentCharge != 0 {
      try visitor.visitSingularInt32Field(value: self.currentCharge, fieldNumber: 1)
    }
    if self.isCharging != false {
      try visitor.visitSingularBoolField(value: self.isCharging, fieldNumber: 2)
    }
    if self.isConnected != false {
      try visitor.visitSingularBoolField(value: self.isConnected, fieldNumber: 3)
    }
    if self.chargeLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.chargeLimit, fieldNumber: 4)
    }
    if self.isChargeLimited != false {
      try visitor.visitSingularBoolField(value: self.isChargeLimited, fieldNumber: 5)
    }
    if self.cycleCount != 0 {
      try visitor.visitSingularInt32Field(value: self.cycleCount, fieldNumber: 6)
    }
    if !self.adapterDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.adapterDescription, fieldNumber: 7)
    }
    if self.batteryWattage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.batteryWattage, fieldNumber: 8)
    }
    if self.adapterWattage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.adapterWattage, fieldNumber: 9)
    }
    if self.systemWattage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.systemWattage, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Rpc_StatusResponse, rhs: Rpc_StatusResponse) -> Bool {
    if lhs.currentCharge != rhs.currentCharge {return false}
    if lhs.isCharging != rhs.isCharging {return false}
    if lhs.isConnected != rhs.isConnected {return false}
    if lhs.chargeLimit != rhs.chargeLimit {return false}
    if lhs.isChargeLimited != rhs.isChargeLimited {return false}
    if lhs.cycleCount != rhs.cycleCount {return false}
    if lhs.adapterDescription != rhs.adapterDescription {return false}
    if lhs.batteryWattage != rhs.batteryWattage {return false}
    if lhs.adapterWattage != rhs.adapterWattage {return false}
    if lhs.systemWattage != rhs.systemWattage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rpc_SetChargeLimitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetChargeLimitRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Rpc_SetChargeLimitRequest, rhs: Rpc_SetChargeLimitRequest) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
