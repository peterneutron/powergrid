// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: powergrid.proto

// The package path should reflect your module structure.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PowerGrid_GetStatus_FullMethodName       = "/rpc.PowerGrid/GetStatus"
	PowerGrid_SetChargeLimit_FullMethodName  = "/rpc.PowerGrid/SetChargeLimit"
	PowerGrid_SetPowerFeature_FullMethodName = "/rpc.PowerGrid/SetPowerFeature"
)

// PowerGridClient is the client API for PowerGrid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The core PowerGrid service definition.
type PowerGridClient interface {
	// GetStatus retrieves the current real-time status of the battery and daemon.
	// It's designed to be called frequently (e.g., every few seconds).
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// SetChargeLimit allows the UI to change the charge limit enforced by the daemon.
	SetChargeLimit(ctx context.Context, in *SetChargeLimitRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetPowerFeature enables or disables a power-related feature (assertions or discharge).
	SetPowerFeature(ctx context.Context, in *SetPowerFeatureRequest, opts ...grpc.CallOption) (*Empty, error)
}

type powerGridClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerGridClient(cc grpc.ClientConnInterface) PowerGridClient {
	return &powerGridClient{cc}
}

func (c *powerGridClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PowerGrid_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerGridClient) SetChargeLimit(ctx context.Context, in *SetChargeLimitRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PowerGrid_SetChargeLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerGridClient) SetPowerFeature(ctx context.Context, in *SetPowerFeatureRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PowerGrid_SetPowerFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerGridServer is the server API for PowerGrid service.
// All implementations must embed UnimplementedPowerGridServer
// for forward compatibility.
//
// The core PowerGrid service definition.
type PowerGridServer interface {
	// GetStatus retrieves the current real-time status of the battery and daemon.
	// It's designed to be called frequently (e.g., every few seconds).
	GetStatus(context.Context, *Empty) (*StatusResponse, error)
	// SetChargeLimit allows the UI to change the charge limit enforced by the daemon.
	SetChargeLimit(context.Context, *SetChargeLimitRequest) (*Empty, error)
	// SetPowerFeature enables or disables a power-related feature (assertions or discharge).
	SetPowerFeature(context.Context, *SetPowerFeatureRequest) (*Empty, error)
	mustEmbedUnimplementedPowerGridServer()
}

// UnimplementedPowerGridServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPowerGridServer struct{}

func (UnimplementedPowerGridServer) GetStatus(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedPowerGridServer) SetChargeLimit(context.Context, *SetChargeLimitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChargeLimit not implemented")
}
func (UnimplementedPowerGridServer) SetPowerFeature(context.Context, *SetPowerFeatureRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPowerFeature not implemented")
}
func (UnimplementedPowerGridServer) mustEmbedUnimplementedPowerGridServer() {}
func (UnimplementedPowerGridServer) testEmbeddedByValue()                   {}

// UnsafePowerGridServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerGridServer will
// result in compilation errors.
type UnsafePowerGridServer interface {
	mustEmbedUnimplementedPowerGridServer()
}

func RegisterPowerGridServer(s grpc.ServiceRegistrar, srv PowerGridServer) {
	// If the following call pancis, it indicates UnimplementedPowerGridServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PowerGrid_ServiceDesc, srv)
}

func _PowerGrid_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerGridServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerGrid_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerGridServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerGrid_SetChargeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChargeLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerGridServer).SetChargeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerGrid_SetChargeLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerGridServer).SetChargeLimit(ctx, req.(*SetChargeLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerGrid_SetPowerFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerGridServer).SetPowerFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerGrid_SetPowerFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerGridServer).SetPowerFeature(ctx, req.(*SetPowerFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerGrid_ServiceDesc is the grpc.ServiceDesc for PowerGrid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerGrid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PowerGrid",
	HandlerType: (*PowerGridServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _PowerGrid_GetStatus_Handler,
		},
		{
			MethodName: "SetChargeLimit",
			Handler:    _PowerGrid_SetChargeLimit_Handler,
		},
		{
			MethodName: "SetPowerFeature",
			Handler:    _PowerGrid_SetPowerFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powergrid.proto",
}
